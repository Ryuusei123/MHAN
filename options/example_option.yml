# general settings
name: MySR          #实验名称  若有debug字样, 则会进入debug模式
model_type: MyModel # 使用的 model 类型
scale: 4  # 放大倍数
num_gpu: 1  # set num_gpu: 0 for cpu mode
manual_seed: 0 # 指定随机种子
# auto_resume 表示自动从断点接着训练

# dataset and data loader settings
datasets:
  train: # 训练数据集的配置
    name: BSDS100 # 自定义的数据集名称
    type: MyDataset # 读取数据的 Dataset 类
    dataroot_gt: datasets/example/BSDS100 # GT / HR 图像的文件夹路径
    dataroot_lq: datasets\DIV2K_train_LR_bicubic\X4 # LQ / LR输入图像的文件夹路径
    meta_info_file: data/meta_info/meta_info_DIV2K800sub_GT.txt # 预先生成的 meta_info 文件
    filename_tmpl: '{}'
    io_backend:
      type: disk

    gt_size: 128 # 训练阶段裁剪 (crop) 的GT图像的尺寸大小,即训练的 label 大小
    use_flip: true # 是否开启水平方向图像增强 (随机水平翻转图像)
    use_rot: true # 是否开启旋转图像增强 (随机旋转图像)

    # data loader
    use_shuffle: true
    num_worker_per_gpu: 3 # 每一个 GPU 的 data loader 读取进程数目
    batch_size_per_gpu: 16 # 每块 GPU 上的 batch size
    dataset_enlarge_ratio: 10 # 放大 dataset 的长度倍数 (默认为1)。可以扩大一个 epoch 所需 iterations
    prefetch_mode: cuda
    pin_memory: true

  val: # 测试数据集的配置
    name: Set5 # 数据集名称
    type: MyDataset # 数据集的类型
    dataroot_gt: datasets/example/Set5
    dataroot_lq: ~ # 使用 ~ 表示空值
    io_backend:
      type: disk

    name: Set14
      type: PairedImageDataset
      dataroot_gt: datasets/Set14/HR
      dataroot_lq: datasets/Set14/LR_bicubic/X4
      io_backend:
        type: disk

    name: Urban100
      type: PairedImageDataset
      dataroot_gt: datasets/Urban100/HR
      dataroot_lq: datasets/Urban100/LR_bicubic/X4
      io_backend:
        type: disk

    name: B100
      type: PairedImageDataset
      dataroot_gt: datasets/B100/HR
      dataroot_lq: datasets/B100/LR_bicubic/X4
      io_backend:
        type: disk

# network structures 网络结构的设置
network_g: # 网络 g 的设置
  type: MyArch # 网络结构 (Architecture) 的类型
  upscale: 4 # 上采样倍数
  num_feat: 64 # 模型内部的 feature map 通道数
  num_block: 16 # 模型内部基础模块的堆叠数
  res_scale: 1.0 # 残差缩放比例，通常用于调整残差输出大小，避免梯度爆炸。
  num_in_ch: 3 # 模型输入的图像通道数
  num_out_ch: 3 # 模型输出的图像通道数
  act: 'relu'
  quantize_a: 6 # 激活值的量化位宽
  quantize_w: 8 # 权重的量化位宽
  quantizer: 'minmax'
  percentile_alpha: 0.99   # 当 quantizer == 'percentile'
  ema_beta: 0.9 # 指数移动平均 (EMA) 的平滑参数，用于动态更新量化范围
  quantizer_w: 'omse'
  imgwise: true # 对图像级别进行量化
  layerwise: true # 对层级别进行量化
  bac: true # 启用 BAC（Bitwidth-Adaptive Calibration，位宽自适应校准）
  bac_beta: 0.5
  img_percentile: 10.0
  fq: true # 启用量化训练

# path
path: # 以下为路径和与训练模型、重启训练的设置
  pretrain_network_g: ~   # 预训练模型的路径, 需要以 pth 结尾的模型
  param_key_g: params_ema # 读取的预训练的参数 key。若需要使用 EMA 模型,需要改成params_ema
  strict_load_g: true # 是否严格地根据参数名称一一对应 load 模型参数。如果选择 false,那么模型对于找不到的参数,会随机初始化;如果选择 true,假如存在不对应的参数,会报错提示
  resume_state: ~ # 重启训练的 state 路径, 在experiments/exp_name/training_states 目录下

# training settings
train: # 这块是训练策略相关的配置
  ema_decay: 0.999 # EMA 更新权重
  step: 1
  gamma: 0.9
  lr_w: 0.01 # 权重量化相关的学习率
  lr_a: 0.01 # 激活量化相关的学习率
  lr_measure_img: 0.1 # 图像量化参数测量的学习率
  lr_measure_layer: 0.01 # 层量化参数测量的学习率
  w_bitloss: 50.0
  w_sktloss: 10.0

  optim_g: # 这块是优化器的配置
    type: Adam # 选择优化器类型,例如 Adam
    lr: !!float 2e-4 # 初始学习率
    weight_decay: 0 # 权重衰退参数
    betas: [0.9, 0.99] # Adam 优化器的 beta1 和 beta2

  scheduler: # 这块是学习率调度器的配置
    type: MultiStepLR # 选择学习率更新策略
    milestones: [50000]

  total_iter: 100000
  warmup_iter: -1  # no warm up

  # losses 这块是损失函数的设置
  l1_opt: # loss 名字,这里表示 pixel-wise loss 的 options
    type: L1Loss # 选择 loss 函数,例如 L1Loss
    loss_weight: 1.0 # 指定 loss 的权重
    reduction: mean # loss reduction 方式

  l2_opt:
    type: MSELoss
    loss_weight: 1.0
    reduction: mean


  perceptual_opt:
    type: PerceptualLoss
    layer_weights:
      conv3_3: 1.0
    vgg_type: vgg19
    use_input_norm: true
    range_norm: false
    perceptual_weight: 0.1
    style_weight: 0.0
    criterion: l1
  perceptual_opt:
    type: PerceptualLoss
    layer_weights:
      conv1_2: 0.1
      conv2_2: 0.1
      conv3_3: 0.5
      conv4_3: 0.3
      conv5_4: 0.1
    vgg_type: vgg19
    use_input_norm: true
    range_norm: true
    perceptual_weight: 0.1
    style_weight: 0.01
    criterion: l1
# validation settings
val: # 这块是 validation 的配置
  val_freq: !!float 5e3 # validation 频率, 每隔 5000 iterations 做一次
  save_img: false # 否需要在 validation 的时候保存图片

  metrics: # 这块是 validation 中使用的指标的配置
    psnr: # metric 名字, 这个名字可以是任意的
      type: calculate_psnr # 选择指标类型
      crop_border: 4 # 计算指标时 crop 图像边界像素范围 (不纳入计算范围)
      test_y_channel: false # 是否转成在 Y(CbCr) 空间上计算
      better: higher # 该指标是越高越好,还是越低越好
    niqe: # 另外一个指标
      type: calculate_niqe
      crop_border: 4
      better: lower

# logging settings
logger: # 这块是 logging 的配置
  print_freq: 100 # 多少次迭代打印一次训练信息
  save_checkpoint_freq: !!float 5e3 # 多少次迭代保存一次模型权重和训练状态
  use_tb_logger: true # 是否使用 tensorboard logger
  wandb:
    project: ~
    resume_id: ~

# dist training settings
dist_params:
  backend: nccl
  port: 29500
